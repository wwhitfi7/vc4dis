typedef enum {
    bkpt = 0x0000,
    nop = 0x0001,
    sleep = 0x0002,
    user = 0x0003,
    ei = 0x0004,
    di = 0x0005,
    cbclr = 0x0006,
    cbadd1 = 0x0007,
    cbadd2 = 0x0008,
    cbadd3 = 0x0009,
    rti = 0x000A,
    table_branch_16_mask = 0xFFF0,
    switch_b = 0x0080,
    switch_s = 0x00A0,
    swir_branch_ver_16_mask = 0xFFE0,
    swi_reg = 0x0020,
    branch = 0x0040,
    branch_long = 0x0060,
    version = 0x00E0,
    swi_u_mask = 0xFFC0,
    swi_u = 0x01C0,
    stack_registers_mask = 0xFF80,
    ldm_reg = 0x0200,
    stm_reg = 0x0280,
    ldm_reg_pc = 0x0300,
    stm_reg_pc = 0x0380,
    ld_st_short_mask = 0xF900,
    ld_short = 0x0800,
    st_short = 0x0900,
    ld_st_short_offset_mask = 0xFE00,
    ld_short_offset = 0x0400,
    st_short_offset = 0x0600,
    br_cond_add_mask = 0xF800,
    add_sp_offset = 0x1000,
    br_cond_short_offset = 0x1800,
    ld_st_reg_offset_mask = 0xF000,
    ld_reg_offset = 0x2000,
    st_reg_offset = 0x3000,
    short_arithlog_mask = 0xE000,
    reg_reg_arithlog = 0x4000,
    reg_imd_arithlog = 0x6000,
    add_cmp_mask = 0xF000,
    add_cmp_word = 0x8000,
    long_cmp_mask = 0xF080,
    branch_cond_long = 0x9000,
    branch_link_cond_long = 0x9080,
    mem_mask_32_b = 0xFF20,
    mem_mask_32_b_12bd = 0xFE20,
    ld_cond_indx = 0xA000,
    st_cond_indx = 0xA020,
    ld_cond_predec = 0xA400,
    st_cond_predec = 0xA420,
    ld_cond_postinc = 0xA500,
    st_cond_postinc = 0xA520,
    ld_16b_disp_reg24 = 0xA800,
    st_16b_disp_reg24 = 0xA820,
    ld_16b_disp_sp = 0xA900,
    st_16b_disp_sp = 0xA920,
    ld_16b_disp_pc = 0xAA00,
    st_16b_disp_pc = 0xAA20,
    ld_16b_disp_r0 = 0xAB00,
    st_16b_disp_r0 = 0xAB20,
    ld_12b_disp = 0xA200,
    st_12b_disp = 0xA220,
    reg_pc_16b_offset_mask = 0xFFE0,
    reg_pc_16b_offset = 0xBFE0,
    word_arithlog_mask = 0xFC00,
    reg_imd16_arithlog = 0xB000,
    add_reg_reg_imd16 = 0xB400,
    word_arithlog_cond_mask = 0xF800,
    cond_arithlog_2word_det = 0xC000,
    word_fop_mask = 0xFE00,
    word_fop_cond_det = 0xC800,
    fp_int_conversion_mask = 0xFFE0,
    ftrunc_cond_det = 0xCA00,
    floor_cond_det = 0xCA20,
    flts_cond_sign_det = 0xCA40,
    flts_cond_usign_det = 0xCA60,
    mov_pd_ra = 0xCC00,
    mov_rd_pd = 0xCC20,
} instruction_type;
